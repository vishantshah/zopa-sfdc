<project name="ZOPA-CONTINUOUS-INTEGRATION" basedir="." xmlns:sf="antlib:com.salesforce">

	<!-- Build properties -->
	<property name="src.dir" value="../src" />
	<property name="lib.dir" value="../build/lib/" /> 
	<property name="destructiveChanges.dir" value="../destructiveChanges" />

	<property environment="env"/> 
	<property name="sf.pkgContents" value="applications/*.*, classes/*.*, customApplicationComponents/*.*, customMetadata/*.*, globalValueSets/*.*, staticresources/*.*, dashboards/*.*, documents/**/*.*, labels/*.*, objects/*.*, layouts/*.*, workflows/*.*, pages/*.*, components/*.*, tabs/*.*, homePageComponents/*.*, homePageLayouts/*.*, letterhead/*.*, queues/*.*, permissionsets/*.*, reports/**/*.*, reportTypes/*.*, sites/*.*, standardValueSets/*.*, tabs/*.*, triggers/*.*, weblinks/*.*, email/**/*.*, flows/*.*, package.xml, destructiveChangesPre.xml, destructiveChangesPost.xml" />

	<!-- Setting default value for username, password and session id properties to empty string 
	     so unset values are treated as empty. Without this, ant expressions such as ${sf.username}
	     will be treated literally.
	-->
	<condition property="sf.username" value=""> <not> <isset property="sf.username"/> </not> </condition>
	<condition property="sf.password" value=""> <not> <isset property="sf.password"/> </not> </condition>
	<condition property="sf.sessionId" value=""> <not> <isset property="sf.sessionId"/> </not> </condition>

	<!-- LOAD ant-salesforce.jar
	* It allows to have multiple ant-salesforce.jar files in the library
	* The lib file usage is controlled by force_ant_lib_version parameter. It must specify a folder name 
	  from which ant-salesforce.jar should be used during the deployment.
	  If force_ant_lib_version parameter is not specified, the default ..lib/ant-salesforce.jar file is used 
	-->

	<fail message="force_ant_lib_version property is set but directory DOES NOT EXIST !
		Make sure the folder name and force_ant_lib_version parameter names do match.">
		<condition>
				<and>
	    			<not><available file="${lib.dir}${env.force_ant_lib_version}" type="dir"/></not>
	    			<isset property="env.force_ant_lib_version"/>
	    		</and>
		</condition>
	</fail>

	<condition property="env.force_ant_lib_version" value=""> 
		<not> 
			<isset property="env.force_ant_lib_version"/> 
		</not> 
	</condition>

	<taskdef resource="com/salesforce/antlib.xml" uri="antlib:com.salesforce">
        <classpath>
            <pathelement location="${lib.dir}${env.force_ant_lib_version}/ant-salesforce.jar" />        	
        </classpath>
    </taskdef>

	<!-- Build targets -->
	<target name="build" depends="setApiVersion, copyDestructiveFiles, deployPackaged, deleteDestructiveFiles" />

    <!-- Set API version 
    * It is must for deployment
	-->
	<target name="setApiVersion">
		<fail message="apiVersion parameter NOT SET !">
			<condition> 
				<or>
					<not><isset property="env.apiVersion" /></not>
					<equals arg1="env.apiVersion" arg2=""/>
				</or>
			</condition>
		</fail>
		<replaceregexp file="${src.dir}/package.xml" match="version>(.*)./version>" replace="version>${env.apiVersion}&lt;/version>" />
	</target>

	<!-- copy destructive files for deletion during deployment. -->
	<target name="copyDestructiveFiles" if="${env.destructiveChanges}">
		<copy file="${destructiveChanges.dir}/destructiveChangesPre.xml" todir="${src.dir}"/>
		<copy file="${destructiveChanges.dir}/destructiveChangesPost.xml" todir="${src.dir}"/>
	</target>
	
	<!-- Build targets definitions -->
	<target name="deployPackaged">
		<zip destfile="${src.dir}/batch.zip" basedir="${src.dir}" includes="${sf.pkgContents}" />
	    <sf:deploy
	    	username="${env.username}" 
	    	password="${env.password}" 
	        serverurl="${env.serverurl}" 
	    	maxPoll="${env.maxPoll}" 
	    	pollWaitMillis="${env.maxWaitMillis}"
	    	zipFile="${src.dir}/batch.zip" 
	    	checkOnly="${env.checkOnly}"
	    	testLevel="${env.testLevel}" 
	    	rollbackOnError="${env.rollbackOnError}" 
	    	ignoreWarnings="true"
		/>
	</target>
	
	<!-- remove destructive files post deployment. -->
	<target name="deleteDestructiveFiles" if="${env.destructiveChanges}">
		<delete file="${src.dir}/destructiveChangesPre.xml" />
		<delete file="${src.dir}/destructiveChangesPost.xml" />
	</target>
	
</project>