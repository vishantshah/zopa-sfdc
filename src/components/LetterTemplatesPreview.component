<apex:component >
    <style type="text/css">
        .popupBackground {
            background-color: black;
            opacity: 0.20;
            filter: alpha(opacity = 20);
            position: absolute;
            width: 100%;
            height: 100%;
            top: 0;
            left: 0;
            z-index: 9998;
        }

        .custPopup {
            background-color: #ececec;
            border-color: #00c8b4;
            border-style: solid;
            border-width: 3px;
            border-radius: 5px;
            text-align: center;
            font-family: Arial,Helvetica,sans-serif;
            font-size: 13px;
            z-index: 9999;
            width: 97%;
            top: 10%;
            padding-bottom: 10px;
            position: fixed;
        }

        .popupHeader {
            font-size: 12pt;
            font-weight: 500;
            display: block;
            padding: 10px 0px;
            background-color: #00c8b4;
            margin-bottom: 10px;
        }

        #previewContainer{
            display: block;
            padding: 10px;
            margin: 10px;
            border: 5px;
        }

        #previewContainer{
            border: 2px solid #00c8b4;
            background-color: #FFFFFF;
        }
    </style>

    <apex:attribute name="Visible" type="Boolean" description="Should this component be shown" default="false"/>
    <apex:attribute name="HeaderMessage" type="String" description="HeaderMessage"/>
    <apex:attribute name="TemplateBodyStr" type="String" description="TemplateBody"/>
    <apex:attribute name="TemplateName" type="String" description="TemplateName"/>

    <apex:outputPanel id="body" rendered="{!Visible}">
        <apex:outputPanel styleclass="popupBackground" layout="block" rendered="{!Visible}" />
        <apex:outputPanel styleClass="custPopup" layout="block" rendered="{!Visible}">
            <apex:outputtext styleClass="popupHeader" value="{!TemplateName} Previev" />
            <div id="previewContainer">
                <div id="templateBody"/>
            </div>
            <apex:componentBody />
        </apex:outputPanel>
        <apex:actionFunction name="populatePreview"  reRender="body" oncomplete="insertTemplateBody()"/>
        <script type="text/javascript">
            function insertTemplateBody(){
                var bodyF = "{!JSENCODE(TemplateBodyStr)}" ;

                document.getElementById('templateBody').innerHTML = bodyF;
            }
        </script>
    </apex:outputPanel>

    <script type="text/javascript">
        function populatePreviewBody() {
            populatePreview();
        }
        
        populatePreviewBody();
    </script>
</apex:component>